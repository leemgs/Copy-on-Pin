From 684ca50c8c1b6491d90216086192b280569d3fea Mon Sep 17 00:00:00 2001
From: David Hildenbrand <hildenbr@in.tum.de>
Date: Tue, 4 Oct 2022 13:15:28 -0400
Subject: [PATCH 01/18] Revert "mm/huge_memory: remove stale locking logic from
 __split_huge_pmd()"

Consider 83a8441f8d8e2e47e9bf2aead3aca625ab95d5ad

This reverts commit 7f7609175ff2339a2cffa48ba2474ef928d7eafd.

Signed-off-by: David Hildenbrand <hildenbr@in.tum.de>
---
 mm/huge_memory.c | 47 ++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 40 insertions(+), 7 deletions(-)

diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index 910a138e9859..7bfcb2d64d2e 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -2131,8 +2131,11 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,
 void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
 		unsigned long address, bool freeze, struct folio *folio)
 {
+	struct folio *orig_folio;
 	spinlock_t *ptl;
 	struct mmu_notifier_range range;
+	bool do_unlock_folio = false;
+	pmd_t _pmd;
 
 	mmu_notifier_range_init(&range, MMU_NOTIFY_CLEAR, 0, vma, vma->vm_mm,
 				address & HPAGE_PMD_MASK,
@@ -2146,16 +2149,46 @@ void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
 	 */
 	VM_BUG_ON(freeze && !folio);
 	VM_WARN_ON_ONCE(folio && !folio_test_locked(folio));
+	orig_folio = folio;
 
-	if (pmd_trans_huge(*pmd) || pmd_devmap(*pmd) ||
-	    is_pmd_migration_entry(*pmd)) {
-		if (folio && folio != page_folio(pmd_page(*pmd)))
-			goto out;
-		__split_huge_pmd_locked(vma, pmd, range.start, freeze);
-	}
-
+repeat:
+	if (pmd_trans_huge(*pmd)) {
+		if (!folio) {
+			folio = page_folio(pmd_page(*pmd));
+			/*
+			 * An anonymous page must be locked, to ensure that a
+			 * concurrent reuse_swap_page() sees stable mapcount;
+			 * but reuse_swap_page() is not used on shmem or file,
+			 * and page lock must not be taken when zap_pmd_range()
+			 * calls __split_huge_pmd() while i_mmap_lock is held.
+			 */
+			if (folio_test_anon(folio)) {
+				if (unlikely(!folio_trylock(folio))) {
+					folio_get(folio);
+					_pmd = *pmd;
+					spin_unlock(ptl);
+					folio_lock(folio);
+					spin_lock(ptl);
+					if (unlikely(!pmd_same(*pmd, _pmd))) {
+						folio_unlock(folio);
+						folio_put(folio);
+						folio = NULL;
+						goto repeat;
+					}
+					folio_put(folio);
+				}
+				do_unlock_folio = true;
+			}
+		}
+	} else if (!(pmd_devmap(*pmd) || is_pmd_migration_entry(*pmd)))
+		goto out;
+	if (orig_folio && orig_folio != page_folio(pmd_page(*pmd)))
+		goto out;
+	__split_huge_pmd_locked(vma, pmd, range.start, freeze);
 out:
 	spin_unlock(ptl);
+	if (do_unlock_folio)
+		folio_unlock(folio);
 	/*
 	 * No need to double call mmu_notifier->invalidate_range() callback.
 	 * They are 3 cases to consider inside __split_huge_pmd_locked():
-- 
2.37.3

