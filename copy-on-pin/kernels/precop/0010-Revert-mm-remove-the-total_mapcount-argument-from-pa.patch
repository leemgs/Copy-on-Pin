From c2978f60a6059640dd42f458080892e9736411cb Mon Sep 17 00:00:00 2001
From: David Hildenbrand <hildenbr@in.tum.de>
Date: Tue, 4 Oct 2022 13:16:09 -0400
Subject: [PATCH 10/18] Revert "mm: remove the total_mapcount argument from
 page_trans_huge_mapcount()"

This reverts commit d08d2b62510e2407cf939e693aefd179dc114913.

Signed-off-by: David Hildenbrand <hildenbr@in.tum.de>
---
 include/linux/mm.h   | 10 +++++++---
 include/linux/swap.h |  2 +-
 mm/huge_memory.c     | 30 ++++++++++++++++++++----------
 mm/swapfile.c        |  2 +-
 4 files changed, 29 insertions(+), 15 deletions(-)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index 8aa3069d8bfa..dbcc2279769e 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -834,15 +834,19 @@ static inline int total_mapcount(struct page *page)
 	return folio_mapcount(page_folio(page));
 }
 
-int page_trans_huge_mapcount(struct page *page);
+int page_trans_huge_mapcount(struct page *page, int *total_mapcount);
 #else
 static inline int total_mapcount(struct page *page)
 {
 	return page_mapcount(page);
 }
-static inline int page_trans_huge_mapcount(struct page *page)
+static inline int page_trans_huge_mapcount(struct page *page,
+					   int *total_mapcount)
 {
-	return page_mapcount(page);
+	int mapcount = page_mapcount(page);
+	if (total_mapcount)
+		*total_mapcount = mapcount;
+	return mapcount;
 }
 #endif
 
diff --git a/include/linux/swap.h b/include/linux/swap.h
index f37837c614c5..ee10d111fce9 100644
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@ -682,7 +682,7 @@ static inline int swp_swapcount(swp_entry_t entry)
 }
 
 #define reuse_swap_page(page) \
-	(page_trans_huge_mapcount(page) == 1)
+	(page_trans_huge_mapcount(page, NULL) == 1)
 
 static inline int try_to_free_swap(struct page *page)
 {
diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index b1efadeda0c6..4063d276534c 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -2502,28 +2502,38 @@ static void __split_huge_page(struct page *page, struct list_head *list,
  * need full accuracy to avoid breaking page pinning, because
  * page_trans_huge_mapcount() is slower than page_mapcount().
  */
-int page_trans_huge_mapcount(struct page *page)
+int page_trans_huge_mapcount(struct page *page, int *total_mapcount)
 {
-	int i, ret;
+	int i, ret, _total_mapcount, mapcount;
 
 	/* hugetlbfs shouldn't call it */
 	VM_BUG_ON_PAGE(PageHuge(page), page);
 
-	if (likely(!PageTransCompound(page)))
-		return atomic_read(&page->_mapcount) + 1;
+	if (likely(!PageTransCompound(page))) {
+		mapcount = atomic_read(&page->_mapcount) + 1;
+		if (total_mapcount)
+			*total_mapcount = mapcount;
+		return mapcount;
+	}
 
 	page = compound_head(page);
 
-	ret = 0;
+	_total_mapcount = ret = 0;
 	for (i = 0; i < thp_nr_pages(page); i++) {
-		int mapcount = atomic_read(&page[i]._mapcount) + 1;
+		mapcount = atomic_read(&page[i]._mapcount) + 1;
 		ret = max(ret, mapcount);
+		_total_mapcount += mapcount;
 	}
-
-	if (PageDoubleMap(page))
+	if (PageDoubleMap(page)) {
 		ret -= 1;
-
-	return ret + compound_mapcount(page);
+		_total_mapcount -= thp_nr_pages(page);
+	}
+	mapcount = compound_mapcount(page);
+	ret += mapcount;
+	_total_mapcount += mapcount;
+	if (total_mapcount)
+		*total_mapcount = _total_mapcount;
+	return ret;
 }
 
 /* Racy check whether the huge page can be split */
diff --git a/mm/swapfile.c b/mm/swapfile.c
index 33c7abb16610..11dc303a46bc 100644
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@ -1619,7 +1619,7 @@ static int page_trans_huge_map_swapcount(struct page *page,
 			swapcount = page_swapcount(page);
 		if (total_swapcount)
 			*total_swapcount = swapcount;
-		return swapcount + page_trans_huge_mapcount(page);
+		return swapcount + page_trans_huge_mapcount(page, NULL);
 	}
 
 	page = compound_head(page);
-- 
2.37.3

