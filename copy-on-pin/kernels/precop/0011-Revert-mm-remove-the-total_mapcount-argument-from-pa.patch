From 5712a242b0fa9b082b1055dd9d82151cdeef0a79 Mon Sep 17 00:00:00 2001
From: David Hildenbrand <hildenbr@in.tum.de>
Date: Tue, 4 Oct 2022 13:16:13 -0400
Subject: [PATCH 11/18] Revert "mm: remove the total_mapcount argument from
 page_trans_huge_map_swapcount()"

This reverts commit 66c7f7a6ac6624fc7e226d43913e10f1f047f579.

Signed-off-by: David Hildenbrand <hildenbr@in.tum.de>
---
 mm/swapfile.c | 32 ++++++++++++++++++++------------
 1 file changed, 20 insertions(+), 12 deletions(-)

diff --git a/mm/swapfile.c b/mm/swapfile.c
index 11dc303a46bc..d16788aae897 100644
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@ -1601,30 +1601,31 @@ static bool page_swapped(struct page *page)
 	return false;
 }
 
-static int page_trans_huge_map_swapcount(struct page *page,
+static int page_trans_huge_map_swapcount(struct page *page, int *total_mapcount,
 					 int *total_swapcount)
 {
-	int i, map_swapcount, _total_swapcount;
+	int i, map_swapcount, _total_mapcount, _total_swapcount;
 	unsigned long offset = 0;
 	struct swap_info_struct *si;
 	struct swap_cluster_info *ci = NULL;
 	unsigned char *map = NULL;
-	int swapcount = 0;
+	int mapcount, swapcount = 0;
 
 	/* hugetlbfs shouldn't call it */
 	VM_BUG_ON_PAGE(PageHuge(page), page);
 
 	if (!IS_ENABLED(CONFIG_THP_SWAP) || likely(!PageTransCompound(page))) {
+		mapcount = page_trans_huge_mapcount(page, total_mapcount);
 		if (PageSwapCache(page))
 			swapcount = page_swapcount(page);
 		if (total_swapcount)
 			*total_swapcount = swapcount;
-		return swapcount + page_trans_huge_mapcount(page, NULL);
+		return mapcount + swapcount;
 	}
 
 	page = compound_head(page);
 
-	_total_swapcount = map_swapcount = 0;
+	_total_mapcount = _total_swapcount = map_swapcount = 0;
 	if (PageSwapCache(page)) {
 		swp_entry_t entry;
 
@@ -1638,7 +1639,8 @@ static int page_trans_huge_map_swapcount(struct page *page,
 	if (map)
 		ci = lock_cluster(si, offset);
 	for (i = 0; i < HPAGE_PMD_NR; i++) {
-		int mapcount = atomic_read(&page[i]._mapcount) + 1;
+		mapcount = atomic_read(&page[i]._mapcount) + 1;
+		_total_mapcount += mapcount;
 		if (map) {
 			swapcount = swap_count(map[offset + i]);
 			_total_swapcount += swapcount;
@@ -1646,14 +1648,19 @@ static int page_trans_huge_map_swapcount(struct page *page,
 		map_swapcount = max(map_swapcount, mapcount + swapcount);
 	}
 	unlock_cluster(ci);
-
-	if (PageDoubleMap(page))
+	if (PageDoubleMap(page)) {
 		map_swapcount -= 1;
-
+		_total_mapcount -= HPAGE_PMD_NR;
+	}
+	mapcount = compound_mapcount(page);
+	map_swapcount += mapcount;
+	_total_mapcount += mapcount;
+	if (total_mapcount)
+		*total_mapcount = _total_mapcount;
 	if (total_swapcount)
 		*total_swapcount = _total_swapcount;
 
-	return map_swapcount + compound_mapcount(page);
+	return map_swapcount;
 }
 
 /*
@@ -1664,12 +1671,13 @@ static int page_trans_huge_map_swapcount(struct page *page,
  */
 bool reuse_swap_page(struct page *page)
 {
-	int count, total_swapcount;
+	int count, total_mapcount, total_swapcount;
 
 	VM_BUG_ON_PAGE(!PageLocked(page), page);
 	if (unlikely(PageKsm(page)))
 		return false;
-	count = page_trans_huge_map_swapcount(page, &total_swapcount);
+	count = page_trans_huge_map_swapcount(page, &total_mapcount,
+					      &total_swapcount);
 	if (count == 1 && PageSwapCache(page) &&
 	    (likely(!PageTransCompound(page)) ||
 	     /* The remaining swap count will be freed soon */
-- 
2.37.3

